import os,string,platform

project = 'meanshift'

#get the mode flag from the command line
#default to 'release' if the user didn't specify
# Define the settings variables. Advantage of this approach is that they can be loaded from file.
# The file is then in format:
#    RELEASE = 1
# etc. And also that it automaticaly generates the help string.
opts = Variables('settings.py')
opts.AddVariables(
    BoolVariable('verbose', 'show compilation commands', 0),
    EnumVariable('build_mode', 'debug or release', 'release', ['debug','release']),
    ('prefix','install directory prefix, sames as autotools prefix','~/opt')
)

unknown = opts.UnknownVariables()
if unknown:
   print "Unknown variables:", unknown.keys()
   Exit(1)

env = Environment(variables = opts, tools = ['default', 'matlab'])
print 'Configuring for ' + env['PLATFORM'] + '...'

header_install_path = os.path.expanduser(os.path.join(env['prefix'], project+'include'))
bin_install_path = os.path.expanduser(os.path.join(env['prefix'], project+'bin'))
lib_install_path = os.path.expanduser(os.path.join(env['prefix'], project+'lib'))
mex_install_path = os.path.expanduser(os.path.join(env['prefix'], project+'/matlab'))
mfile_install_path = mex_install_path

install_paths = [bin_install_path,lib_install_path,mex_install_path,mfile_install_path,header_install_path]

for p in install_paths:
    Mkdir(p)	
 
#tell the user what we're doing
print 'Compiling in ' + env['build_mode'] + ' mode...'

if env['PLATFORM'] == 'posix':
   env.Append(CPPDEFINES=['UNIX'])

HOST_OS = platform.system()
HOST_ARCH = platform.machine()

cc = env['CC']
if cc == 'gcc':     
   opt = ['-O3','-std=c++11']		
   dbg = ['-g','-std=c++11']         

#append the user's additional compile flags
#assume debugcflags and releasecflags are defined
if env['build_mode'] == 'debug':
   env.AppendUnique(CCFLAGS=dbg)
else:
   env.AppendUnique(CCFLAGS=opt)
   env.AppendUnique(CPPDEFINES=['NDEBUG'])

#make sure the sconscripts can get to the variables
Export('env','bin_install_path','lib_install_path','mex_install_path','mfile_install_path','HOST_OS','HOST_ARCH')

SConscript('scons.what',variant_dir = os.path.join('.build', HOST_OS, HOST_ARCH, env['MATLAB']['RELEASE'], env['build_mode']),duplicate=0);

mex_alias = env.Alias('install-mex',mex_install_path)
mfiles_alias = env.Alias('install-mfiles',mfile_install_path)
env.Alias('install',[mex_alias,mfiles_alias])